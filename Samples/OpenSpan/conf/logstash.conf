
input {
file {
    path => [ "C:\Users\rumi\AppData\Roaming\OpenSpan\CRM_E_CRMfrmLogin_Created.log" ]
    type => "openspan.logincreate"
  }
file {
    path => [ "C:\Users\rumi\AppData\Roaming\OpenSpan\RuntimeLog.txt" ]
    type => "openspan.runtimelog"
# will force to restart parsing the file all over again. Interesting fearture either for recovery or testing
	start_position => "beginning"
  }



}
filter {


# OpenSpam filtering to cover :
# - mapping logs from CSV format ('|' instead of ',')
# - fixing timestamp issue (in the runtimelog, timestamp do not carry any date, only the time
#   date is defined in the header part of the file after "Created Date:"
# - compute elasped time to execute any component, for that we use Logstash elapsed plug-in
# - extract field Stage (Start/End) as well as sessionId

if [type] =~ /openspan.runtimelog/
{

csv{
separator => "|"
    columns => ["MsgType","TimeStamp","Thread","State","Category","DesignComponent","Component","Message"]
}
grok {
    match => ["Component","(?<ComponentName>(.*?))[-]+(?<ComponentIndex>[0-9]+[ ]*$)"]
    match => ["MsgType", "[Created date: ]+(?<runinglog.createdate>%{DATE_US})"]

}
    if [runinglog.createdate]
       {
ruby
{
			init => "time = Time.new; @@credate = time.strftime('%m/%d/%Y') "
			code => "@@credate = event.get('[runinglog.createdate]')"
}
  
}
ruby
{
code => "event.set('TimeStamp', event.get('TimeStamp') + @@credate)"
}

date {
# 08:37:54.359 PM 10/15/2017
     match => ["TimeStamp"," hh:mm:ss.SSS aa MM/dd/YYYY"]
 }
grok {
 match => ["Message","[ ]*(?<Stage>(.*?))\^[SessionId]+\=(?<SessionId>[A-Za-z0-9\-]*)\;"]
add_tag => "%{Stage}"
}


elapsed {
    start_tag => "Start"
    end_tag => "End"
    unique_id_field => "SessionId"
    id => "Elapsed"
  }

}

}
output {

if [type] =~ /openspan/
{    elasticsearch { 
	hosts => "http://${ELKMASTERHOSTNAME}:${ELKMASTERPORT}"
	index => "%{type}-%{+YYYY.MM.dd}"
    }
}

# display to the console any of the output stream, this can be commented for performance reason
	
  stdout { codec => rubydebug }
}

