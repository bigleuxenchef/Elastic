input {
  beats {
    port => 5044
  }
}
filter
{


if [source] =~ /RuntimeLog.txt/
  {
	csv{
	  separator => "|"
	  columns => ["MsgType","TimeStamp","Thread","State","Category","DesignComponent","Component","Message"]
	}
	grok {
	  match => ["Component","(?<ComponentName>(.*?))[-]+(?<ComponentIndex>[0-9]+[ ]*$)"]
	  match => ["MsgType", "[Created date: ]+(?<runinglog.createdate>%{DATE_US})"]

	}
	if [runinglog.createdate]
	{
	ruby
	{
	  init => "time = Time.new; @@credate = time.strftime('%m/%d/%Y') "
	  code => "@@credate = event.get('[runinglog.createdate]')"
	}
	  
	}
	ruby
	{
	  code => "event.set('TimeStamp', event.get('TimeStamp') + @@credate)"
	}

	date {
	# 08:37:54.359 PM 10/15/2017
	  match => ["TimeStamp"," hh:mm:ss.SSS aa MM/dd/YYYY"]
	 }
	grok {
	  match => ["Message","[ ]*(?<Stage>(.*?))\^[SessionId]+\=(?<SessionId>[A-Za-z0-9\-]*)\;"]
	  tag_on_failure => NULL
	  add_tag => "%{Stage}"
	}
	elapsed {
	  start_tag => "Start"
	  end_tag => "End"
	  unique_id_field => "SessionId"
	  id => "Elapsed"
	}
  }

# File Sample for Runtime_Log4Net.txt
#INFO  | 2018-04-01 16:30:36,151 |       1 | OpenSpan Log4Net Publisher diagnostic log
#INFO  | 2018-04-01 16:30:36,168 |       1 | Computer:     BPSERVER
#INFO  | 2018-04-01 16:30:36,184 |       1 | File name:    C:\Users\rumi\AppData\Roaming\OpenSpan\Runtime_Log4Net.txt
#INFO  | 2018-04-01 16:30:36,184 |       1 | 
#INFO  | 2018-04-01 16:30:36,184 |       1 | TID | PID   | State | Category                  | DesignComponent                | Component                      | Message (plus verbose message, if applicable)
#INFO  | 2018-04-01 16:30:36,199 |       1 | --- | ----- | ----- | ------------------------- | ------------------------------ | ------------------------------ | ---------------------------------------------
#DEBUG | 2018-04-01 16:30:36,199 |       1 | 1   | 12872 | STA   | Diagnostic Initialization |                                |                                | Diagnostic Publisher Started, Verbose Message: Verbose Message
#INFO  | 2018-04-01 16:30:36,214 |       1 | 1   | 12872 | STA   | Runtime                   |                                |                                | ContextMenuStripPlus: Created
#WARN  | 2018-04-01 16:30:36,230 |       1 | 1   | 12872 | STA   | Diagnostic Initialization |                                |                                | Publisher did not initialize OpenSpan.Diagnostics.Publishers.TracePublisher
#INFO  | 2018-04-01 16:30:44,652 |       1 | 1   | 12872 | STA   | Manifest                  |                                |                                | Configuration section TypeResolution is redirected to TypeResolution_8_0.

else
if [source] =~ /Runtime_Log4Net.txt/
  {
#(?<type>(.*?))[ ]+[|]?[ ]*(?<date>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?)[ ]+[|]?[ ]+(?<thread>[0-9|\w]+)[ ]+[|]?[ ]+(?<TID>[0-9]+)[ ]+[|]?[ ]+(?<PID>[0-9]+)[ ]+[|]?[ ]+(?<State>\w+)[ ]+[|]?[ ](?<Category>[\w+ ]*)[ ]+[|]?[ ](?<DesignComponent>[\w+ -]*)[ ]+[|]?[ ](?<Component>[\w+ -]*)[ ]+[|]?[ ](?<Message>.*?$)
	grok {
        	  match => ["message","(?<type>(.*?))[ ]+[|]?[ ]*(?<date>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?)[ ]+[|]?[ ]+(?<thread>[0-9|\w]+)[ ]+[|]?[ ]+(?<TID>[0-9]+)[ ]+[|]?[ ]+(?<PID>[0-9]+)[ ]+[|]?[ ]+(?<State>\w+)[ ]+[|]?[ ](?<Category>[\w+ ]*)[ ]+[|]?[ ](?<DesignComponent>[\w+ -]*)[ ]+[|]?[ ](?<Component>[\w+ -]*)[ ]+[|]?[ ](?<Message>.*?$)"]

        }	
    if [date]
     {
       date {
        # 2018-04-01 16:30:36,199
          match => ["date","yyyy-MM-dd HH:mm:ss,SSS"]
	  target => "date"
         }
    }
}
}
output {
  elasticsearch {
    hosts => "http://${ELKMASTERHOSTNAME:mbp15.local}:${ELKMASTERPORT:9200}"
    manage_template => false
    #index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    index => "openspan-filebeat-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}" 
  }
}
